# Part D

# Main Process
1. Create and initialize shared memory
2. Load the student list into shared memory
3. Create and initialize semaphores
4. Fork 5 child processes (one for each TA)
5. Wait for all child processes to complete
6. Clean up resources (shared memory and semaphores)

# TA Process
1. Attempt to acquire its own semaphore and the next
2. Access the shared memory to get the next student number if successful.
3. Release the Semaphores
4. Simulate marking (random delay)
5. Write the student number and mark to its own file
6; Repeat until it has gone through the list 3 times

# Part E

# Deadlock Prevention
### Ordered Resource Acquisition
- Semaphores are acquired by lowest number first. This consistent order of acquiring semaphores helps to prevent the circular wait conditions, a common cause of deadlocks.

### Timeout and Retry Mechanism
- We have a function called acquire_semaphores_safely that enforces a retry limit of MAX_RETRIES.
- Additionally, we enforce the rule that if a TA cannot retrieve both semaphores, it releases the semaphore its currently holding and tries again. (Retry Mechanism)

### No Resource Holding
- TA's do not hold resources after they release their semaphore. Consequently, the time resources are held gets reduced, also reducing the risk of deadlocks due to contention.

# Livelock Prevention
### Exponential Backoff
- TA's do not immediately retry acquiring a resource after failing. Instead, they wait a random time before trying again.
- We use a backoff time, which exponentially increases after each try
- Consequently, TAs are prevented from continuously interfering with each other

### Progress Tracking
- Progress is tracked by TAs though the student list
- The output files (TA#.txt) contain all marks of multiple students that the TA marked
- This prevents TAs form getting student in an infinite cycle of retrying, but not actually making progress
